# Buildspec for React/TypeScript frontend
version: 0.2 # Use modern buildspec format

env:
    variables:
        BUILD_DIR: "build" # Change to "dist" if your bundler outputs there
        # PKG_MGR: "npm"     # Optionally set to "yarn" or "pnpm" if you prefer

phases:
    install:
        runtime-versions:
            nodejs: 18 # Use Node.js 18 LTS (adjust to match your project)
        commands:
            - node -v
            - npm -v
            # Clean install for reproducible builds; replace with "yarn install --frozen-lockfile"
            # or "pnpm install --frozen-lockfile" if you use those.
            - npm ci

    pre_build:
        commands:
            # Optional: run lint and type-check to fail fast on quality issues.
            # Make sure you have scripts in package.json like:
            #  "lint": "eslint .", "typecheck": "tsc --noEmit"
            - echo "Running optional lint/type-check (won't fail if scripts are missing)"
            - npm run lint || echo "No lint script; skipping"
            - npm run typecheck || echo "No typecheck script; skipping"

            # Optional: run tests in CI mode and export reports (Jest example).
            # Add these scripts in package.json for best results:
            #  "test:ci": "jest --ci --reporters=default --reporters=jest-junit --coverage"
            - echo "Running optional test suite"
            - npm run test:ci || echo "No test:ci script; skipping"

    build:
        commands:
            # Build your production bundle; must output to $BUILD_DIR
            - npm run build
            - test -d "$BUILD_DIR" || (echo "Build directory '$BUILD_DIR' not found" && exit 1)

artifacts:
    # Upload the compiled site as the pipeline artifact (for S3/CloudFront deploy stage)
    base-directory: build # Change to "$BUILD_DIR" if your CodeBuild image supports env refs here
    files:
        - "**/*"

cache:
    paths:
        - "node_modules/**/*" # Speeds up subsequent builds (safe with npm ci)

# Optional: surface test & coverage reports in the CodeBuild UI (Jest example).
# Requires jest-junit and coverage config (e.g., cobertura) in your project.
reports:
    jest-tests:
        files:
            - "junit.xml" # jest-junit default output (configure via JEST_JUNIT_OUTPUT env or reporter options)
        file-format: JUNITXML
    coverage:
        files:
            - "coverage/cobertura-coverage.xml" # e.g., via "coverageReporters": ["cobertura", "text"]
        file-format: COBERTURAXML
